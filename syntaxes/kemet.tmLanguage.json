{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Kemet",
  "scopeName": "source.kemet",
  "fileTypes": ["k", "kemet"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#builtins"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.documentation.kemet",
          "begin": "///[!/]?",
          "end": "$",
          "patterns": [
            {
              "match": "\\b(TODO|FIXME|XXX|NOTE|HACK|BUG)\\b:?",
              "name": "keyword.other.todo.kemet"
            }
          ]
        },
        {
          "name": "comment.line.double-slash.kemet",
          "begin": "//[!/]?",
          "end": "$",
          "patterns": [
            {
              "match": "\\b(TODO|FIXME|XXX|NOTE|HACK|BUG)\\b:?",
              "name": "keyword.other.todo.kemet"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.kemet",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#string-escapes"
            }
          ]
        },
        {
          "name": "string.quoted.single.kemet",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "include": "#string-escapes"
            }
          ]
        }
      ]
    },
    "string-escapes": {
      "patterns": [
        {
          "name": "constant.character.escape.kemet",
          "match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape.kemet",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.scientific.kemet",
          "match": "\\b[0-9]+\\.[0-9]+[eE][+-]?[0-9]+\\b"
        },
        {
          "name": "constant.numeric.float.kemet",
          "match": "\\b[0-9]+\\.[0-9]+\\b"
        },
        {
          "name": "constant.numeric.hex.kemet",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.octal.kemet",
          "match": "\\b0o[0-7]+\\b"
        },
        {
          "name": "constant.numeric.binary.kemet",
          "match": "\\b0b[01]+\\b"
        },
        {
          "name": "constant.numeric.decimal.kemet",
          "match": "\\b[0-9]+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.conditional.kemet",
          "match": "\\b(if|else|match|default)\\b"
        },
        {
          "name": "keyword.control.repeat.kemet",
          "match": "\\b(for|while|do)\\b"
        },
        {
          "name": "keyword.control.flow.kemet",
          "match": "\\b(return|break|continue|defer|throw)\\b"
        },
        {
          "name": "keyword.control.trycatch.kemet",
          "match": "\\b(try|catch)\\b"
        },
        {
          "name": "keyword.control.import.kemet",
          "match": "\\b(use|from|as)\\b"
        },
        {
          "name": "storage.modifier.kemet",
          "match": "\\b(pub|static|inline|mut|comptime|sizeof|typeof)\\b"
        },
        {
          "name": "storage.type.kemet",
          "match": "\\b(let|def|fn)\\b"
        },
        {
          "name": "keyword.operator.new.kemet",
          "match": "\\b(new)\\b"
        },
        {
          "name": "keyword.operator.word.kemet",
          "match": "\\b(and|or)\\b"
        },
        {
          "name": "keyword.other.test.kemet",
          "match": "\\b(test)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.structure.kemet",
          "match": "\\b(struct|enum|errset)\\b"
        },
        {
          "name": "support.type.primitive.kemet",
          "match": "\\b(type|err|void|bool|any|cint|cflt|null_t|und_t|slice|char|cpoint)\\b"
        },
        {
          "name": "support.type.integer.kemet",
          "match": "\\b(i8|i16|i32|i64|i128|i256|isize|u8|u16|u32|u64|u128|u256|usize)\\b"
        },
        {
          "name": "support.type.float.kemet",
          "match": "\\b(f16|f32|f64|f80|f128)\\b"
        },
        {
          "name": "support.type.sized.kemet",
          "match": "\\b[iu][0-9]+\\b"
        },
        {
          "name": "support.type.sized.float.kemet",
          "match": "\\bf[0-9]+\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.declaration.kemet",
          "begin": "\\b(pub\\s+)?(static\\s+)?(comptime\\s+)?(inline\\s+)?(fn)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\s*(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.kemet"
            },
            "2": {
              "name": "storage.modifier.kemet"
            },
            "3": {
              "name": "storage.modifier.kemet"
            },
            "4": {
              "name": "storage.modifier.kemet"
            },
            "5": {
              "name": "storage.type.function.kemet"
            },
            "6": {
              "name": "entity.name.function.kemet"
            }
          },
          "end": "(?<=\\))|(?=\\{)|(?=->)",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.function.type.kemet",
          "match": "\\b(fn)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "storage.type.function.kemet"
            }
          }
        },
        {
          "name": "meta.function.call.kemet",
          "match": "([_a-zA-Z][_a-zA-Z0-9]*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.call.kemet"
            }
          }
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "match": "(mut\\s+)?([_a-zA-Z][_a-zA-Z0-9]*)\\s*(:)",
          "captures": {
            "1": {
              "name": "storage.modifier.kemet"
            },
            "2": {
              "name": "variable.parameter.kemet"
            },
            "3": {
              "name": "punctuation.separator.key-value.kemet"
            }
          }
        },
        {
          "include": "#types"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#strings"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.compound.kemet",
          "match": "(\\+=|-=|\\*=|/=|%=)"
        },
        {
          "name": "keyword.operator.assignment.kemet",
          "match": "(?<![<>!])=(?!=)"
        },
        {
          "name": "keyword.operator.comparison.kemet",
          "match": "(==|!=|<=|>=|<(?!<)|>(?!>))"
        },
        {
          "name": "keyword.operator.arithmetic.kemet",
          "match": "(\\+\\+|--|\\.\\*|\\*\\*|\\+|(?<!->)-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.bitwise.kemet",
          "match": "(<<|>>|&(?!&)|\\|(?!\\|)|\\^|~)"
        },
        {
          "name": "keyword.operator.logical.kemet",
          "match": "(!(?!=))"
        },
        {
          "name": "keyword.operator.range.kemet",
          "match": "(\\.\\.=|\\.\\.)"
        },
        {
          "name": "keyword.operator.null-coalescing.kemet",
          "match": "\\?\\?"
        },
        {
          "name": "keyword.operator.optional.kemet",
          "match": "\\?(?!\\?)"
        },
        {
          "name": "keyword.operator.arrow.kemet",
          "match": "->"
        },
        {
          "name": "keyword.operator.member.kemet",
          "match": "\\."
        },
        {
          "name": "keyword.operator.error.kemet",
          "match": "!(?!=)"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.section.block.begin.kemet",
          "match": "\\{"
        },
        {
          "name": "punctuation.section.block.end.kemet",
          "match": "\\}"
        },
        {
          "name": "punctuation.section.parens.begin.kemet",
          "match": "\\("
        },
        {
          "name": "punctuation.section.parens.end.kemet",
          "match": "\\)"
        },
        {
          "name": "punctuation.section.brackets.begin.kemet",
          "match": "\\["
        },
        {
          "name": "punctuation.section.brackets.end.kemet",
          "match": "\\]"
        },
        {
          "name": "punctuation.separator.comma.kemet",
          "match": ","
        },
        {
          "name": "punctuation.separator.colon.kemet",
          "match": ":"
        },
        {
          "name": "punctuation.terminator.statement.kemet",
          "match": ";"
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "name": "variable.language.special.kemet",
          "match": "\\b(self|@i)\\b"
        },
        {
          "name": "support.function.builtin.kemet",
          "match": "@[_a-zA-Z][_a-zA-Z0-9]*"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.kemet",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.kemet",
          "match": "\\b(null|und)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "meta.variable.declaration.kemet",
          "begin": "\\b(pub\\s+)?(static\\s+)?(comptime\\s+)?(let)\\s+(mut\\s+)?([_a-zA-Z][_a-zA-Z0-9]*)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.kemet"
            },
            "2": {
              "name": "storage.modifier.kemet"
            },
            "3": {
              "name": "storage.modifier.kemet"
            },
            "4": {
              "name": "storage.type.variable.kemet"
            },
            "5": {
              "name": "storage.modifier.kemet"
            },
            "6": {
              "name": "variable.other.declaration.kemet"
            }
          },
          "end": "(;|$|(?=\\n))",
          "patterns": [
            {
              "include": "#types"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#builtins"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#punctuation"
            }
          ]
        },
        {
          "name": "meta.type.definition.kemet",
          "begin": "\\b(pub\\s+)?(static\\s+)?(def)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\s*(=)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.kemet"
            },
            "2": {
              "name": "storage.modifier.kemet"
            },
            "3": {
              "name": "storage.type.definition.kemet"
            },
            "4": {
              "name": "entity.name.type.kemet"
            },
            "5": {
              "name": "keyword.operator.assignment.kemet"
            }
          },
          "end": "(;|$|(?=\\n))",
          "patterns": [
            {
              "include": "#types"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#punctuation"
            }
          ]
        },
        {
          "name": "meta.use.kemet",
          "begin": "\\b(pub\\s+)?(static\\s+)?(use)\\s+",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.kemet"
            },
            "2": {
              "name": "storage.modifier.kemet"
            },
            "3": {
              "name": "keyword.control.import.kemet"
            }
          },
          "end": "(;|$|(?=\\n))",
          "patterns": [
            {
              "match": "\\b(as|from)\\b",
              "name": "keyword.control.import.kemet"
            },
            {
              "match": "\\*",
              "name": "constant.language.wildcard.kemet"
            },
            {
              "include": "#strings"
            },
            {
              "match": "[_a-zA-Z][_a-zA-Z0-9]*",
              "name": "variable.other.kemet"
            },
            {
              "include": "#punctuation"
            }
          ]
        },
        {
          "name": "variable.other.kemet",
          "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
        }
      ]
    }
  }
}